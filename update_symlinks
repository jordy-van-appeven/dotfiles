#!/usr/bin/env python

# NOTE: This file runs on Python 2.x and 3.x with only the stdlib.
# That is on purpose. In practice, that means only basic imports, no pathlib,
# no type annotations, and so on.

import logging
import os
import sys

DEFAULT_SYMLINKS_FILE = "symlinks.conf"
LOGGING_FORMAT = "%(levelname)s: %(message)s"
LINK_SEPARATOR = " -> "
HOME_DIR = os.path.realpath(os.path.expanduser("~"))

logger = logging.getLogger(__name__)


def bailout(msg, *args):
    logger.error(msg, *args)
    logger.error("Exiting...")
    sys.exit(1)


if __name__ == "__main__":
    config_dir = os.path.realpath(os.path.join(os.path.dirname(__file__)))

    try:
        symlinks_file = sys.argv[1]
    except IndexError:
        symlinks_file = os.path.join(config_dir, DEFAULT_SYMLINKS_FILE)

    level = getattr(
        logging, os.environ.get("UPDATE_SYMLINKS_LOG_LEVEL", "info").upper()
    )
    logging.basicConfig(format=LOGGING_FORMAT, level=level)

    os.chdir(HOME_DIR)

    # Changing $HOME makes .expanduser() work when $HOME contains symlinks.
    os.environ["HOME"] = HOME_DIR

    for line in open(symlinks_file):

        line = line.strip()

        if line == "" or line.startswith("#"):
            continue

        if LINK_SEPARATOR not in line:
            bailout("Line does not contain arrow: %r", line)

        symlink_from, symlink_to = line.split(LINK_SEPARATOR)
        symlink_from = symlink_from.strip().rstrip("/")
        symlink_to = symlink_to.strip().rstrip("/")

        if (
            symlink_to.startswith("~")
            or symlink_to.startswith("/")
            or symlink_to.startswith("..")
        ):
            bailout(
                "Destination path is not relative to configuration directory: %r",
                symlink_to,
            )

        if not symlink_from.startswith("~/"):
            symlink_from = "~/%s" % symlink_from
        symlink_from = symlink_from.rstrip("/")

        symlink_from_full = os.path.expanduser(symlink_from)
        symlink_to_full = os.path.join(config_dir, symlink_to)
        symlink_to_relative = os.path.relpath(
            os.path.join(config_dir, symlink_to),
            os.path.dirname(symlink_from_full),
        )
        logger.debug(
            "from %s, full=%s",
            symlink_from,
            symlink_from_full,
        )
        logger.debug(
            "to %s, full=%s, relative=%s",
            symlink_to,
            symlink_to_full,
            symlink_to_relative,
        )

        should_link = True
        if os.path.lexists(symlink_from_full):
            if not os.path.islink(symlink_from_full):
                bailout("'%s' exists; move it out of the way first", symlink_from)

            if os.readlink(symlink_from_full) == symlink_to_relative:
                logger.info("%s already setup correctly", symlink_from)
                should_link = False
            else:
                logger.warning(
                    "Overwriting existing symlink %s (pointed to %s)",
                    symlink_from,
                    os.path.realpath(symlink_from_full),
                )

        if should_link:
            dirname = os.path.dirname(symlink_from_full)
            if not os.path.isdir(dirname):
                os.makedirs(dirname)
            logger.info("Linking %s -> %s", symlink_from, symlink_to_relative)
            if os.path.lexists(symlink_from_full):
                os.unlink(symlink_from_full)
            os.symlink(symlink_to_relative, symlink_from_full)
